name: ci-cd-ghcr

on:
  push:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: mirai-ocr

jobs:
  publish-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          #tags: type=semver,pattern={{version}},latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .  # Build Docker image from the current directory (i.e., the root of the repository)
          push: true   # Push the built Docker image to GitHub Packages
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: publish-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Kubeconfig
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir $HOME/.kube
          echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config

      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Update deployment.yaml (with the image and the new image hash) & deploy 
        run: |
          IMAGE_HASH=${{ github.sha }}
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          IMAGE_LOWERCASE=$(echo $IMAGE | tr '[:upper:]' '[:lower:]')
          NAMESPACE=${{env.K8S_NAMESPACE}}
          sed -i "s|PLACEHOLDER_FOR_IMAGE_HASH|${IMAGE_HASH}|g" deployment.yaml
          sed -i "s|PLACEHOLDER_FOR_IMAGE|${IMAGE_LOWERCASE}|g" deployment.yaml
          sed -i "s|PLACEHOLDER_FOR_NAMESPACE|${NAMESPACE}|g" deployment.yaml
          cat ./deployment.yaml
          kubectl apply -f ./deployment.yaml -n ${{env.K8S_NAMESPACE}}
  

  # test-deployement:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Wait for the service to be ready
  #       run: sleep 60

  #     - name: Test Service Availability
  #       run: |
  #         URL="http://${{ github.event.repository.name }}.c0.cloud-pi-native.com"
  #         STATUS=$(curl -s -L -o /dev/null -w '%{http_code}' $URL)
  #         if [ $STATUS -ne 200]; then
  #           echo "Service is not running or returned an unexpected error"
  #           exit 1
  #         fi